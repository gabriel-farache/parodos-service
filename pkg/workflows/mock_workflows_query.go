// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/parodos-dev/parodos-service/pkg/workflows (interfaces: WorkflowsQuery)

// Package workflows is a generated GoMock package.
package workflows

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWorkflowsQuery is a mock of WorkflowsQuery interface.
type MockWorkflowsQuery struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowsQueryMockRecorder
}

// MockWorkflowsQueryMockRecorder is the mock recorder for MockWorkflowsQuery.
type MockWorkflowsQueryMockRecorder struct {
	mock *MockWorkflowsQuery
}

// NewMockWorkflowsQuery creates a new mock instance.
func NewMockWorkflowsQuery(ctrl *gomock.Controller) *MockWorkflowsQuery {
	mock := &MockWorkflowsQuery{ctrl: ctrl}
	mock.recorder = &MockWorkflowsQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowsQuery) EXPECT() *MockWorkflowsQueryMockRecorder {
	return m.recorder
}

// GetGroup mocks base method.
func (m *MockWorkflowsQuery) GetGroup(arg0 string) (*GroupDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0)
	ret0, _ := ret[0].(*GroupDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockWorkflowsQueryMockRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockWorkflowsQuery)(nil).GetGroup), arg0)
}

// GetWorkflow mocks base method.
func (m *MockWorkflowsQuery) GetWorkflow(arg0, arg1 string) (*Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0, arg1)
	ret0, _ := ret[0].(*Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockWorkflowsQueryMockRecorder) GetWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockWorkflowsQuery)(nil).GetWorkflow), arg0, arg1)
}

// ListGroups mocks base method.
func (m *MockWorkflowsQuery) ListGroups() ([]Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups")
	ret0, _ := ret[0].([]Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockWorkflowsQueryMockRecorder) ListGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockWorkflowsQuery)(nil).ListGroups))
}

// ListWorkflows mocks base method.
func (m *MockWorkflowsQuery) ListWorkflows(arg0 string) ([]Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0)
	ret0, _ := ret[0].([]Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockWorkflowsQueryMockRecorder) ListWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockWorkflowsQuery)(nil).ListWorkflows), arg0)
}
